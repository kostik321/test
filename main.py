#!/usr/bin/env python3
import socket
import threading
import json
import time
import sys
import os
import configparser
from datetime import datetime
from tkinter import *
from tkinter import ttk, messagebox, scrolledtext
import tkinter.font as tkFont

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
try:
    import pystray
    from pystray import MenuItem as item
    from PIL import Image, ImageDraw
    TRAY_AVAILABLE = True
except ImportError:
    TRAY_AVAILABLE = False
    print("Warning: pystray not available, tray functionality disabled")

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
try:
    from data_processor import DataProcessor
    from receipt_formatter import ReceiptFormatter
except ImportError:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    class DataProcessor:
        def __init__(self):
            self.json_products = {}
            self.current_transaction_lines = []
            self.transaction_total = 0.0
            self.transaction_active = False
            self.is_return_operation = False
    
    class ReceiptFormatter:
        @staticmethod
        def format_success_receipt(products, total):
            lines = ["=== –ß–ï–ö ==="]
            for product in products.values():
                lines.append(product.get('fPName', ''))
                qty = product.get('fQtty', 0)
                price = product.get('fPrice', 0)
                sum_val = product.get('fSum', 0)
                lines.append(f"{qty} x {price:.2f} = {sum_val:.2f} –≥—Ä–Ω")
            lines.append("")
            lines.append(f"–†–ê–ó–û–ú: {total:.2f} –≥—Ä–Ω")
            lines.append("=== –°–ü–õ–ê–ß–ï–ù–û ===")
            lines.append("–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
            return "\n".join(lines)
        
        @staticmethod
        def format_return_receipt(products, total):
            lines = ["=== –ü–û–í–ï–†–ù–ï–ù–ù–Ø ==="]
            for product in products.values():
                lines.append(f"–ü–û–í–ï–†–ù–£–¢–û: {product.get('fPName', '')}")
                lines.append(f"–°—É–º–∞: {product.get('fSum', 0):.2f} –≥—Ä–Ω")
            lines.append("")
            lines.append(f"–°–£–ú–ê –ü–û–í–ï–†–ù–ï–ù–ù–Ø: {total:.2f} –≥—Ä–Ω")
            lines.append("=== –û–ü–ï–†–ê–¶–Ü–Æ –°–ö–ê–°–û–í–ê–ù–û ===")
            return "\n".join(lines)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
products = {}
total = 0.0
clients = []
active = False
prev_products = {}
server_running = False
tcp_log_file = None
udp_socket = None
tcp_socket = None
cli_socket = None
data_processor = DataProcessor()
receipt_formatter = ReceiptFormatter()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_CONFIG = {
    'tcp_status_port': '4000',
    'udp_json_port': '4001', 
    'tcp_client_port': '4002',
    'autostart': 'false',
    'minimize_to_tray': 'false',
    'start_minimized': 'false',
    'log_file': 'tcp_server.log'
}

class POSServerGUI:
    def __init__(self):
        self.root = Tk()
        self.root.title("UniPro POS Server v26")
        self.root.geometry("950x750")
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏
        try:
            self.root.iconbitmap(default='pos.ico')
        except:
            pass
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.tcp_status_port = StringVar(value=DEFAULT_CONFIG['tcp_status_port'])
        self.udp_json_port = StringVar(value=DEFAULT_CONFIG['udp_json_port'])
        self.tcp_client_port = StringVar(value=DEFAULT_CONFIG['tcp_client_port'])
        self.autostart = BooleanVar(value=False)
        self.minimize_to_tray = BooleanVar(value=False)
        self.start_minimized = BooleanVar(value=False)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
        self.tray_icon = None
        if TRAY_AVAILABLE:
            self.setup_tray()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é
        if self.start_minimized.get() and TRAY_AVAILABLE:
            self.root.after(100, self.hide_window)
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        if self.autostart.get():
            self.root.after(1000, self.start_server)
    
    def create_widgets(self):
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = Menu(self.root)
        self.root.config(menu=menubar)
        
        file_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self.save_config)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self.load_config)
        file_menu.add_separator()
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç config.py", command=self.export_config_py)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.quit_application)
        
        tools_menu = Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å UDP", command=self.test_udp)
        tools_menu.add_command(label="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å TCP", command=self.test_tcp)
        tools_menu.add_separator()
        tools_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏", command=self.clear_all_logs)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill=BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.Frame(notebook)
        notebook.add(settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        ports_frame = ttk.LabelFrame(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–æ–≤", padding=15)
        ports_frame.pack(fill=X, pady=5, padx=5)
        
        # TCP –ø–æ—Ä—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        tcp_frame = Frame(ports_frame)
        tcp_frame.grid(row=0, column=0, columnspan=2, sticky=W, pady=5)
        ttk.Label(tcp_frame, text="TCP –ø–æ—Ä—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:").pack(side=LEFT)
        tcp_entry = ttk.Entry(tcp_frame, textvariable=self.tcp_status_port, width=10)
        tcp_entry.pack(side=LEFT, padx=5)
        ttk.Label(tcp_frame, text="(1024-65535)", foreground="gray").pack(side=LEFT)
        
        # UDP –ø–æ—Ä—Ç –¥–ª—è JSON
        udp_frame = Frame(ports_frame)
        udp_frame.grid(row=1, column=0, columnspan=2, sticky=W, pady=5)
        ttk.Label(udp_frame, text="UDP –ø–æ—Ä—Ç –¥–ª—è JSON –¥–∞–Ω–Ω—ã—Ö:").pack(side=LEFT)
        udp_entry = ttk.Entry(udp_frame, textvariable=self.udp_json_port, width=10)
        udp_entry.pack(side=LEFT, padx=5)
        ttk.Label(udp_frame, text="(1024-65535)", foreground="gray").pack(side=LEFT)
        
        # TCP –ø–æ—Ä—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        cli_frame = Frame(ports_frame)
        cli_frame.grid(row=2, column=0, columnspan=2, sticky=W, pady=5)
        ttk.Label(cli_frame, text="TCP –ø–æ—Ä—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:").pack(side=LEFT)
        cli_entry = ttk.Entry(cli_frame, textvariable=self.tcp_client_port, width=10)
        cli_entry.pack(side=LEFT, padx=5)
        ttk.Label(cli_frame, text="(1024-65535)", foreground="gray").pack(side=LEFT)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
        ttk.Button(ports_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç—ã", command=self.apply_ports).grid(row=3, column=0, pady=10, sticky=W)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞
        startup_frame = ttk.LabelFrame(settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞", padding=15)
        startup_frame.pack(fill=X, pady=5, padx=5)
        
        ttk.Checkbutton(startup_frame, text="–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", 
                       variable=self.autostart).pack(anchor=W, pady=2)
        ttk.Checkbutton(startup_frame, text="–°–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏", 
                       variable=self.minimize_to_tray).pack(anchor=W, pady=2)
        ttk.Checkbutton(startup_frame, text="–ó–∞–ø—É—Å–∫–∞—Ç—å —Å–≤–µ—Ä–Ω—É—Ç—ã–º –≤ —Ç—Ä–µ–π", 
                       variable=self.start_minimized).pack(anchor=W, pady=2)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É Windows
        autostart_win_frame = ttk.LabelFrame(settings_frame, text="–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ Windows", padding=15)
        autostart_win_frame.pack(fill=X, pady=5, padx=5)
        
        self.in_startup = BooleanVar(value=self.check_windows_startup())
        ttk.Checkbutton(autostart_win_frame, text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É Windows", 
                       variable=self.in_startup, command=self.toggle_windows_startup).pack(anchor=W, pady=2)
        ttk.Label(autostart_win_frame, text="(–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ Windows)", 
                 foreground="gray").pack(anchor=W, padx=20)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(settings_frame)
        control_frame.pack(fill=X, pady=15, padx=5)
        
        self.start_button = ttk.Button(control_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", 
                                      command=self.start_server, style="Accent.TButton")
        self.start_button.pack(side=LEFT, padx=5)
        
        self.stop_button = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", 
                                     command=self.stop_server, state=DISABLED)
        self.stop_button.pack(side=LEFT, padx=5)
        
        ttk.Button(control_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.save_config).pack(side=LEFT, padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.LabelFrame(settings_frame, text="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", padding=15)
        info_frame.pack(fill=X, pady=5, padx=5)
        
        self.server_status = StringVar(value="‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.active_transaction = StringVar(value="–ù–µ—Ç")
        self.cart_items = StringVar(value="0")
        self.total_amount = StringVar(value="0.00 UAH")
        self.connected_clients = StringVar(value="0")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º grid –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        ttk.Label(info_frame, text="–°—Ç–∞—Ç—É—Å:").grid(row=0, column=0, sticky=W, pady=2)
        status_label = ttk.Label(info_frame, textvariable=self.server_status)
        status_label.grid(row=0, column=1, sticky=W, padx=10, pady=2)
        
        ttk.Label(info_frame, text="–ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:").grid(row=1, column=0, sticky=W, pady=2)
        ttk.Label(info_frame, textvariable=self.active_transaction).grid(row=1, column=1, sticky=W, padx=10, pady=2)
        
        ttk.Label(info_frame, text="–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:").grid(row=2, column=0, sticky=W, pady=2)
        ttk.Label(info_frame, textvariable=self.cart_items).grid(row=2, column=1, sticky=W, padx=10, pady=2)
        
        ttk.Label(info_frame, text="–°—É–º–º–∞:").grid(row=3, column=0, sticky=W, pady=2)
        ttk.Label(info_frame, textvariable=self.total_amount).grid(row=3, column=1, sticky=W, padx=10, pady=2)
        
        ttk.Label(info_frame, text="–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:").grid(row=4, column=0, sticky=W, pady=2)
        ttk.Label(info_frame, textvariable=self.connected_clients).grid(row=4, column=1, sticky=W, padx=10, pady=2)
        
        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        log_frame = ttk.Frame(notebook)
        notebook.add(log_frame, text="üìù –õ–æ–≥–∏")
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ–≥–æ–≤
        log_toolbar = ttk.Frame(log_frame)
        log_toolbar.pack(fill=X, padx=5, pady=5)
        
        ttk.Button(log_toolbar, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_logs).pack(side=LEFT, padx=2)
        ttk.Button(log_toolbar, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_logs).pack(side=LEFT, padx=2)
        
        self.autoscroll = BooleanVar(value=True)
        ttk.Checkbutton(log_toolbar, text="–ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞", variable=self.autoscroll).pack(side=LEFT, padx=10)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.log_text = scrolledtext.ScrolledText(log_frame, height=30, width=100, wrap=WORD)
        self.log_text.pack(fill=BOTH, expand=True, padx=5, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        self.log_text.tag_config("error", foreground="red")
        self.log_text.tag_config("success", foreground="green")
        self.log_text.tag_config("warning", foreground="orange")
        self.log_text.tag_config("info", foreground="blue")
        
        # –í–∫–ª–∞–¥–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_frame = ttk.Frame(notebook)
        notebook.add(monitor_frame, text="üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        # –¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞
        cart_label_frame = ttk.LabelFrame(monitor_frame, text="–¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞", padding=10)
        cart_label_frame.pack(fill=BOTH, expand=True, padx=5, pady=5)
        
        self.cart_text = scrolledtext.ScrolledText(cart_label_frame, height=15, width=80)
        self.cart_text.pack(fill=BOTH, expand=True)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = StringVar(value="–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=SUNKEN)
        status_bar.pack(side=BOTTOM, fill=X)
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        self.update_status()
    
    def send_to_all_clients(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        global clients
        disconnected = []
        for client in clients:
            try:
                client.send(message.encode("utf-8"))
            except:
                disconnected.append(client)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        for client in disconnected:
            try:
                clients.remove(client)
                client.close()
            except:
                pass
    
    def format_product_update(self, action, product_name, product_data=None):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        if action == "ADD":
            qty = product_data.get('fQtty', 0) if product_data else 0
            price = product_data.get('fPrice', 0) if product_data else 0
            sum_val = product_data.get('fSum', 0) if product_data else 0
            return f"‚ûï –î–û–î–ê–ù–û: {product_name}\n   {qty} x {price:.2f} = {sum_val:.2f} –≥—Ä–Ω\n"
        
        elif action == "REMOVE":
            return f"‚ûñ –í–ò–î–ê–õ–ï–ù–û: {product_name}\n"
        
        elif action == "UPDATE":
            qty = product_data.get('fQtty', 0) if product_data else 0
            price = product_data.get('fPrice', 0) if product_data else 0
            sum_val = product_data.get('fSum', 0) if product_data else 0
            return f"üîÑ –û–ù–û–í–õ–ï–ù–û: {product_name}\n   {qty} x {price:.2f} = {sum_val:.2f} –≥—Ä–Ω\n"
        
        return ""
    
    def udp_server(self, port):
        """UDP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ JSON –¥–∞–Ω–Ω—ã—Ö —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
        global products, total, active, prev_products, udp_socket, data_processor
        try:
            udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            udp_socket.bind(("0.0.0.0", port))
            self.log(f"UDP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}", "success")
            
            while server_running:
                try:
                    udp_socket.settimeout(1.0)
                    data, addr = udp_socket.recvfrom(4096)
                    
                    obj = json.loads(data)
                    cmd = obj.get("cmd", {}).get("cmd", "")
                    
                    if cmd == "clear":
                        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
                        if active:
                            self.send_to_all_clients("‚ùå === –û–ü–ï–†–ê–¶–Ü–Æ –°–ö–ê–°–û–í–ê–ù–û ===\n\n")
                            self.log("TRANSACTION CANCELLED", "warning")
                        products = {}
                        prev_products = {}
                        total = 0.0
                        active = False
                        data_processor.reset_transaction()
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        old_products = dict(prev_products)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã
                        products = {}
                        prev_products = {}
                        
                        for item in obj.get("goods", []):
                            name = item.get("fPName", "")
                            if name:
                                products[name] = item
                                prev_products[name] = item
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä - –Ω–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        if products and not active:
                            self.send_to_all_clients("üõí === –ü–û–ß–ê–¢–û–ö –û–ü–ï–†–ê–¶–Ü–á ===\n\n")
                            active = True
                            self.log("NEW TRANSACTION STARTED", "success")
                        
                        # REAL-TIME –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º —Å—Ä–∞–∑—É
                        if active:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            for name, item in products.items():
                                if name not in old_products:
                                    # –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω
                                    msg = self.format_product_update("ADD", name, item)
                                    self.send_to_all_clients(msg)
                                    self.log(f"+ ADDED: {name}", "info")
                                    
                                elif old_products[name].get('fQtty') != item.get('fQtty'):
                                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                                    msg = self.format_product_update("UPDATE", name, item)
                                    self.send_to_all_clients(msg)
                                    self.log(f"~ UPDATED: {name}", "info")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            for name in old_products:
                                if name not in products:
                                    # –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω
                                    msg = self.format_product_update("REMOVE", name)
                                    self.send_to_all_clients(msg)
                                    self.log(f"- REMOVED: {name}", "warning")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
                            old_total = total
                            total = obj.get("sum", {}).get("sum", 0)
                            
                            if total != old_total:
                                self.send_to_all_clients(f"üí∞ –°–£–ú–ê: {total:.2f} –≥—Ä–Ω\n" + "="*30 + "\n")
                                self.log(f"TOTAL UPDATED: {total:.2f} UAH")
                        
                        if products:
                            self.log(f"CART: {len(products)} items | Total: {total} UAH")
                            
                except socket.timeout:
                    continue
                except Exception as e:
                    if server_running:
                        self.log(f"UDP Error: {e}", "error")
        except Exception as e:
            self.log(f"UDP Server Error: {e}", "error")
    
    def tcp_server(self, port):
        """TCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞"""
        global products, total, clients, active, prev_products, tcp_socket, tcp_log_file
        try:
            tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            tcp_socket.bind(("0.0.0.0", port))
            tcp_socket.listen(5)
            self.log(f"TCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}", "success")
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
            try:
                tcp_log_file = open("tcp_server.log", "a", buffering=1, encoding="utf-8")
                self.log("TCP log file opened: tcp_server.log")
            except:
                self.log("Warning: Could not open TCP log file", "warning")
            
            while server_running:
                try:
                    tcp_socket.settimeout(1.0)
                    c, a = tcp_socket.accept()
                    self.log(f"TCP connection from {a}")
                    threading.Thread(target=self.handle_tcp_client, args=(c, a), daemon=True).start()
                except socket.timeout:
                    continue
                except Exception as e:
                    if server_running:
                        self.log(f"TCP Accept Error: {e}", "error")
        except Exception as e:
            self.log(f"TCP Server Error: {e}", "error")
    
    def handle_tcp_client(self, client_socket, addr):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ TCP –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–ø–ª–∞—Ç—ã"""
        global products, total, active, prev_products, tcp_log_file, receipt_formatter
        buf = b""
        try:
            while server_running:
                try:
                    client_socket.settimeout(1.0)
                    d = client_socket.recv(1024)
                    if not d:
                        break
                    buf += d
                    
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if tcp_log_file:
                        tcp_log_file.write("\n" + "="*60 + "\n")
                        tcp_log_file.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] From: {addr}\n")
                        tcp_log_file.write(f"RAW bytes ({len(d)}): {d}\n")
                        tcp_log_file.write(f"HEX: {d.hex()}\n")
                        
                        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏
                        for encoding in ['cp1251', 'utf-8', 'cp1252', 'iso-8859-5']:
                            try:
                                decoded = d.decode(encoding, errors='ignore')
                                tcp_log_file.write(f"{encoding.upper()}: {decoded}\n")
                            except:
                                pass
                        tcp_log_file.flush()
                    
                    # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
                    text = ""
                    for encoding in ['cp1251', 'utf-8', 'cp1252']:
                        try:
                            text = buf.decode(encoding, errors='ignore')
                            break
                        except:
                            continue
                    
                    text_lower = text.lower()
                    
                    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–´
                    success_patterns = [
                        "–¥—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É",
                        "–¥—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É",  # —Å –¥—Ä—É–≥–æ–π –µ
                        "–¥—è–∫—É–µ–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É",  # –±–µ–∑ –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏
                        "–ø–æ–∫—É–ø–∫—É",  # —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        "—Å–ø–ª–∞—á–µ–Ω–æ",
                        "–æ–ø–ª–∞—á–µ–Ω–æ"
                    ]
                    
                    payment_confirmed = False
                    for pattern in success_patterns:
                        if pattern in text_lower:
                            payment_confirmed = True
                            self.log(f"Payment pattern matched: '{pattern}'", "info")
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ HEX –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
                    hex_data = buf.hex().lower()
                    hex_patterns = [
                        "c4ffea",  # "–î—è–∫" –≤ CP1251
                        "d0b4d18f",  # "–î—è" –≤ UTF-8
                        "efeeea",  # "–ø–æ–∫" –≤ CP1251
                    ]
                    
                    for hex_pattern in hex_patterns:
                        if hex_pattern in hex_data:
                            payment_confirmed = True
                            self.log(f"Payment HEX pattern matched: {hex_pattern}", "info")
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    if "–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è" in text_lower or "–≤–æ–∑–≤—Ä–∞—Ç" in text_lower:
                        self.log("RETURN OPERATION DETECTED", "warning")
                        if products:
                            msg = receipt_formatter.format_return_receipt(products, total)
                            self.send_to_all_clients(msg)
                            self.log(f"RETURN COMPLETE | Total: {total} UAH", "warning")
                        else:
                            msg = "=== –ü–û–í–ï–†–ù–ï–ù–ù–Ø ===\n–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ\n=== –û–ü–ï–†–ê–¶–Ü–Æ –°–ö–ê–°–û–í–ê–ù–û ===\n"
                            self.send_to_all_clients(msg)
                            self.log("RETURN WITHOUT PRODUCTS", "warning")
                        
                        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        products = {}
                        prev_products = {}
                        total = 0.0
                        active = False
                        data_processor.reset_transaction()
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                    elif payment_confirmed and products:
                        self.log("PAYMENT CONFIRMED - Transaction complete!", "success")
                        self.log(f"Matched text: '{text[:100]}'", "info")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫
                        msg = "\n" + "="*40 + "\n"
                        msg += receipt_formatter.format_success_receipt(products, total)
                        msg += "\n" + "="*40 + "\n"
                        
                        self.send_to_all_clients(msg)
                        self.log(f"TRANSACTION COMPLETE | Total: {total} UAH", "success")
                        
                        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        products = {}
                        prev_products = {}
                        total = 0.0
                        active = False
                        data_processor.reset_transaction()
                        break
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
                    elif len(buf) > 0:
                        self.log(f"TCP data not recognized: {text[:50]}", "warning")
                        
                except socket.timeout:
                    continue
                except Exception as e:
                    if server_running:
                        self.log(f"TCP Client Error: {e}", "error")
                    break
                    
        except Exception as e:
            self.log(f"TCP Handle Error: {e}", "error")
        finally:
            client_socket.close()
            self.log(f"TCP connection closed: {addr}")
    
    def client_server(self, port):
        """TCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        global clients, cli_socket
        try:
            cli_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            cli_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            cli_socket.bind(("0.0.0.0", port))
            cli_socket.listen(10)
            self.log(f"Client —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}", "success")
            
            while server_running:
                try:
                    cli_socket.settimeout(1.0)
                    c, a = cli_socket.accept()
                    self.log(f"CLIENT CONNECTED: {a}", "info")
                    clients.append(c)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    try:
                        welcome_msg = "üîå === UniPro POS Server v26 ===\n"
                        welcome_msg += "üì° Real-time updates enabled\n"
                        welcome_msg += "‚è≥ Waiting for transaction...\n"
                        welcome_msg += "="*40 + "\n"
                        c.send(welcome_msg.encode("utf-8"))
                    except:
                        pass
                        
                except socket.timeout:
                    continue
                except Exception as e:
                    if server_running:
                        self.log(f"Client Server Error: {e}", "error")
        except Exception as e:
            self.log(f"Client Server Error: {e}", "error")
    
    def apply_ports(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ config.py"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤
            tcp_status = int(self.tcp_status_port.get())
            udp_json = int(self.udp_json_port.get())
            tcp_client = int(self.tcp_client_port.get())
            
            if not all(1024 <= p <= 65535 for p in [tcp_status, udp_json, tcp_client]):
                raise ValueError("–ü–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1024-65535")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if len(set([tcp_status, udp_json, tcp_client])) != 3:
                raise ValueError("–ü–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ config.py
            self.update_config_py(tcp_status, udp_json, tcp_client)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.save_config()
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            
            # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            if server_running:
                if messagebox.askyesno("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å?"):
                    self.stop_server()
                    self.root.after(500, self.start_server)
                    
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç—ã: {e}")
    
    def update_config_py(self, tcp_status, udp_json, tcp_client):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ config.py —Å –Ω–æ–≤—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏"""
        config_content = f'''# –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TCP_STATUS_PORT = {tcp_status}    # TCP –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞
UDP_JSON_PORT = {udp_json}      # UDP –¥–ª—è JSON –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞
TCP_CLIENT_PORT = {tcp_client}    # TCP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞–º

# –ö–æ–¥–∏—Ä–æ–≤–∫–∏
ENCODINGS = ['utf-8', 'cp1251', 'ascii', 'latin1']

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π
SUCCESS_INDICATORS = ["–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É", "–¥—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É", "–ø–æ–∫—É–ø–∫—É", "—Å–ø–ª–∞—á–µ–Ω–æ"]
RETURN_INDICATORS = ["–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", "–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è", "–í–æ–∑–≤—Ä–∞—Ç", "–≤–æ–∑–≤—Ä–∞—Ç"]
DELETE_INDICATORS = ["–í–∏–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä:", "–≤–∏–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä:"]

# HEX –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
SUCCESS_HEX_PATTERNS = ["c4ffea", "d0b4d18f", "efeeea"]
'''
        
        try:
            with open('config.py', 'w', encoding='utf-8') as f:
                f.write(config_content)
            self.log("config.py –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–æ—Ä—Ç–∞–º–∏", "success")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config.py: {e}", "error")
    
    def export_config_py(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ config.py"""
        try:
            tcp_status = int(self.tcp_status_port.get())
            udp_json = int(self.udp_json_port.get())
            tcp_client = int(self.tcp_client_port.get())
            
            self.update_config_py(tcp_status, udp_json, tcp_client)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "config.py —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config.py: {e}")
    
    def test_udp(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ UDP —Å–æ–æ–±—â–µ–Ω–∏—è"""
        test_data = {
            "cmd": {"cmd": ""},
            "goods": [
                {
                    "fPName": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1",
                    "fPrice": 15.50,
                    "fQtty": 2,
                    "fSum": 31.00
                },
                {
                    "fPName": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2",
                    "fPrice": 25.00,
                    "fQtty": 1,
                    "fSum": 25.00
                }
            ],
            "sum": {"sum": 56.00}
        }
        
        try:
            test_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            test_socket.sendto(json.dumps(test_data).encode(), ('localhost', int(self.udp_json_port.get())))
            test_socket.close()
            self.log("–¢–µ—Å—Ç–æ–≤–æ–µ UDP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "info")
            messagebox.showinfo("–¢–µ—Å—Ç UDP", "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", "error")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    def test_tcp(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            test_socket.settimeout(2)
            test_socket.connect(('localhost', int(self.tcp_status_port.get())))
            test_socket.send("–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É".encode('cp1251'))
            test_socket.close()
            self.log("–¢–µ—Å—Ç–æ–≤–æ–µ TCP —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "info")
            messagebox.showinfo("–¢–µ—Å—Ç TCP", "TCP —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ TCP —Ç–µ—Å—Ç–∞: {e}", "error")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"TCP —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    
    def check_windows_startup(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ Windows"""
        try:
            import winreg
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                               r"Software\Microsoft\Windows\CurrentVersion\Run", 
                               0, winreg.KEY_READ)
            try:
                winreg.QueryValueEx(key, "UniProPOSServer")
                winreg.CloseKey(key)
                return True
            except:
                winreg.CloseKey(key)
                return False
        except:
            return False
    
    def toggle_windows_startup(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ Windows"""
        try:
            import winreg
            key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                               r"Software\Microsoft\Windows\CurrentVersion\Run", 
                               0, winreg.KEY_SET_VALUE)
            
            if self.in_startup.get():
                exe_path = os.path.abspath(sys.argv[0])
                if exe_path.endswith('.py'):
                    exe_path = f'"{sys.executable}" "{exe_path}"'
                else:
                    exe_path = f'"{exe_path}"'
                winreg.SetValueEx(key, "UniProPOSServer", 0, winreg.REG_SZ, exe_path)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É Windows")
            else:
                try:
                    winreg.DeleteValue(key, "UniProPOSServer")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ Windows")
                except:
                    pass
            
            winreg.CloseKey(key)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É: {e}")
            self.in_startup.set(not self.in_startup.get())
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        global server_running, active, products, total, clients
        
        self.server_status.set("üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if server_running else "‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.active_transaction.set("–î–∞" if active else "–ù–µ—Ç")
        self.cart_items.set(str(len(products)))
        self.total_amount.set(f"{total:.2f} UAH")
        self.connected_clients.set(str(len(clients)))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        if products:
            cart_info = "=== –¢–ï–ö–£–©–ê–Ø –ö–û–†–ó–ò–ù–ê ===\n"
            for name, item in products.items():
                qty = item.get('fQtty', 0)
                price = item.get('fPrice', 0)
                sum_val = item.get('fSum', 0)
                cart_info += f"\n{name}\n  {qty} x {price:.2f} = {sum_val:.2f} –≥—Ä–Ω\n"
            cart_info += f"\n{'='*30}\n–ò–¢–û–ì–û: {total:.2f} –≥—Ä–Ω"
            
            self.cart_text.delete(1.0, END)
            self.cart_text.insert(END, cart_info)
        else:
            self.cart_text.delete(1.0, END)
            self.cart_text.insert(END, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
        if server_running:
            self.status_var.set(f"–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç | –ü–æ—Ä—Ç—ã: TCP {self.tcp_status_port.get()}, "
                               f"UDP {self.udp_json_port.get()}, Client {self.tcp_client_port.get()}")
        else:
            self.status_var.set("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        self.root.after(1000, self.update_status)
    
    def start_server(self):
        global server_running
        if server_running:
            self.log("–°–µ—Ä–≤–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "warning")
            return
            
        try:
            tcp_status = int(self.tcp_status_port.get())
            udp_json = int(self.udp_json_port.get())
            tcp_client = int(self.tcp_client_port.get())
            
            if not all(1024 <= p <= 65535 for p in [tcp_status, udp_json, tcp_client]):
                raise ValueError("–ü–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1024-65535")
            
            threading.Thread(target=self.udp_server, args=(udp_json,), daemon=True).start()
            threading.Thread(target=self.tcp_server, args=(tcp_status,), daemon=True).start()
            threading.Thread(target=self.client_server, args=(tcp_client,), daemon=True).start()
            
            server_running = True
            
            self.log(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç–∞—Ö: TCP {tcp_status}, UDP {udp_json}, TCP Client {tcp_client}", "success")
            
            self.start_button.config(state=DISABLED)
            self.stop_button.config(state=NORMAL)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {e}")
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}", "error")
    
    def stop_server(self):
        global server_running, udp_socket, tcp_socket, cli_socket, tcp_log_file, clients
        server_running = False
        
        for client in clients:
            try:
                client.close()
            except:
                pass
        clients = []
        
        try:
            if udp_socket:
                udp_socket.close()
                udp_socket = None
            if tcp_socket:
                tcp_socket.close()
                tcp_socket = None
            if cli_socket:
                cli_socket.close()
                cli_socket = None
            if tcp_log_file:
                tcp_log_file.close()
                tcp_log_file = None
        except:
            pass
        
        self.log("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "warning")
        
        self.start_button.config(state=NORMAL)
        self.stop_button.config(state=DISABLED)
    
    def log(self, message, tag=None):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–≥–∞–º–∏"""
        timestamp = datetime.now().strftime("[%H:%M:%S]")
        log_message = f"{timestamp} {message}\n"
        
        try:
            if hasattr(self, 'log_text') and self.log_text.winfo_exists():
                self.log_text.insert(END, log_message, tag)
                if self.autoscroll.get():
                    self.log_text.see(END)
        except:
            pass
        
        try:
            print(log_message.strip())
        except:
            pass
        
        try:
            with open("pos_server.log", "a", encoding="utf-8") as f:
                f.write(log_message)
        except:
            pass
    
    def clear_logs(self):
        self.log_text.delete(1.0, END)
        self.log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", "info")
    
    def clear_all_logs(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤?"):
            self.clear_logs()
            try:
                for log_file in ['pos_server.log', 'tcp_server.log', 'tcp_4000.log']:
                    if os.path.exists(log_file):
                        os.remove(log_file)
                self.log("–í—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω—ã", "success")
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {e}", "error")
    
    def save_logs(self):
        from tkinter.filedialog import asksaveasfilename
        filename = asksaveasfilename(
            defaultextension=".log",
            filetypes=[("Log files", "*.log"), ("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.log_text.get(1.0, END))
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")
    
    def save_config(self):
        config = configparser.ConfigParser()
        config['SETTINGS'] = {
            'tcp_status_port': self.tcp_status_port.get(),
            'udp_json_port': self.udp_json_port.get(),
            'tcp_client_port': self.tcp_client_port.get(),
            'autostart': str(self.autostart.get()),
            'minimize_to_tray': str(self.minimize_to_tray.get()),
            'start_minimized': str(self.start_minimized.get())
        }
        
        try:
            with open('pos_server_config.ini', 'w') as f:
                config.write(f)
            self.log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "success")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def load_config(self):
        config = configparser.ConfigParser()
        try:
            config.read('pos_server_config.ini')
            if 'SETTINGS' in config:
                settings = config['SETTINGS']
                self.tcp_status_port.set(settings.get('tcp_status_port', DEFAULT_CONFIG['tcp_status_port']))
                self.udp_json_port.set(settings.get('udp_json_port', DEFAULT_CONFIG['udp_json_port']))
                self.tcp_client_port.set(settings.get('tcp_client_port', DEFAULT_CONFIG['tcp_client_port']))
                self.autostart.set(settings.getboolean('autostart', False))
                self.minimize_to_tray.set(settings.getboolean('minimize_to_tray', False))
                self.start_minimized.set(settings.getboolean('start_minimized', False))
                self.log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "info")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "warning")
    
    def setup_tray(self):
        if not TRAY_AVAILABLE:
            return
            
        def create_image():
            width = 64
            height = 64
            image = Image.new('RGB', (width, height), color='#2c3e50')
            dc = ImageDraw.Draw(image)
            dc.rectangle([10, 10, width-10, height-10], fill='#3498db')
            dc.text((20, 20), "POS", fill='white')
            return image
        
        menu = pystray.Menu(
            item('–ü–æ–∫–∞–∑–∞—Ç—å', self.show_window, default=True),
            item('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä', lambda: self.root.after(0, self.start_server)),
            item('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä', lambda: self.root.after(0, self.stop_server)),
            pystray.Menu.SEPARATOR,
            item('–í—ã—Ö–æ–¥', self.quit_from_tray)
        )
        
        self.tray_icon = pystray.Icon("pos_server", create_image(), "UniPro POS Server", menu)
    
    def on_closing(self):
        if self.minimize_to_tray.get() and TRAY_AVAILABLE:
            self.hide_window()
        else:
            if server_running:
                if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏?"):
                    self.quit_application()
            else:
                self.quit_application()
    
    def hide_window(self):
        self.root.withdraw()
        if self.tray_icon and not self.tray_icon.visible:
            threading.Thread(target=self.tray_icon.run, daemon=True).start()
        self.log("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–≤–µ—Ä–Ω—É—Ç–∞ –≤ —Ç—Ä–µ–π", "info")
    
    def show_window(self, icon=None, item=None):
        self.root.deiconify()
        self.root.lift()
        self.root.focus_force()
        if self.tray_icon:
            self.tray_icon.stop()
    
    def quit_from_tray(self, icon, item):
        icon.stop()
        self.root.after(0, self.quit_application)
    
    def quit_application(self):
        self.stop_server()
        if self.tray_icon:
            self.tray_icon.stop()
        self.save_config()
        self.root.quit()
        self.root.destroy()
        sys.exit(0)
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    print("UniPro POS Server v26 with Real-Time Updates")
    print("="*50)
    app = POSServerGUI()
    app.run()
